data = require "main.data"

local INVUL = 150
local INPUT_LOCK = 70

function init(self)
	self.snap = true
	self.move = vmath.vector3()
	self.invul = INVUL
	self.lock = 0
	msg.post(".", "acquire_input_focus")
end

local function quit2menu(self)
	msg.post("main:/sound", "stop_sound")
	msg.post("main:/handler", "show_menu")
end

local function move(self)
	if vmath.length(self.move) > 0 and data.turn == 0 then
		local pos = data.playerpos + self.move
		local t = tilemap.get_tile("/level#tilemap", "world", pos.x, pos.y)
		if t == 0 then
			go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, data.tile2world(pos), go.EASING_LINEAR, 0.2)
			data.playerpos = pos
			data.turn = 1
		end
	end
end

local function cam(self)
	if self.snap then
		msg.post("view#script", "snap_to", {position = go.get_position()})
		self.snap = false
	else	
		msg.post("view#script", "look_at", {position = go.get_position()})
	end
end

local function flash(self)
	if self.invul > 0 then
		self.invul = self.invul - 1
		if self.invul % 10 < 6 then
			msg.post("#sprite", "enable")
		else
			msg.post("#sprite", "disable")
		end
	end
end

local function clear(self)
	go.animate("#sprite", "tint.w", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_INOUTQUAD, 1)
	data.savegamefile()
	msg.post("/common/view#clear", "show")
	self.lock = INPUT_LOCK
end

local function turn(self)
	if data.turn > 0 then
		data.turn = data.turn + 1
		if data.turn > 20 then
			data.turn = 0
		end
	end
end

function update(self, dt)
	if data.state == data.STATE_PLAYING then
		move(self)
		cam(self)
		flash(self)
		turn(self)
	end

	self.move = vmath.vector3()
	if self.lock > 0 then self.lock = self.lock - 1 end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("position") then
		go.set_position(message.pos)
		data.playerpos = data.world2tile(message.pos)
	elseif message_id == hash("quit") then
		quit2menu(self)
	end
end

local function dropbomb(self)
	local pos = data.tile2world(data.playerpos)
	pos.z = pos.z - 0.1
	factory.create("#bomb-factory", pos)
	self.invul = INVUL
end

local function input_playing(self, action_id, action)
	if not action.pressed then return
	end
	
	if action_id == hash("left") then
		self.move.x = -1
	elseif action_id == hash("right") then
		self.move.x = 1
	elseif action_id == hash("up") then
		self.move.y = 1
	elseif action_id == hash("down") then
		self.move.y = -1
	elseif action_id == hash("action") and action.pressed then
		dropbomb(self)
	elseif action_id == hash("exit") and action.pressed then
		msg.post("view#pause", "show")
	elseif action_id == hash("debug") and action.pressed then
		clear(self)
	end
end

local function input_clear(self, action_id, action)
	if action_id == hash("action") and action.pressed then
		data.level = data.level + 1
		if data.level > data.MAX_LEVELS then
			data.level = 1
			quit2menu(self)
		else
			msg.post("game:/loader", "new_level")
		end
	end
end

local function input_gameover(self, action_id, action)
	if action_id == hash("exit") and action.pressed then
		quit2menu(self)
	end
end

local function input_complete(self, action_id, action)
	if action_id == hash("exit") and action.pressed then
		quit2menu(self)
	end
end

function on_input(self, action_id, action)
	if self.lock > 0 then return
	end	
	if data.state == data.STATE_PLAYING then
		input_playing(self, action_id, action)
	elseif data.state == data.STATE_PAUSE then
		msg.post("view#pause", "input", {action_id = action_id, action = action})
	elseif data.state == data.STATE_CLEAR then
		input_clear(self, action_id, action)
	elseif data.state == data.STATE_GAMEOVER then
		input_gameover(self, action_id, action)
	elseif data.state == data.STATE_COMPLETE then
		input_complete(self, action_id, action)
	end
end
